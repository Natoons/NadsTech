@* @page "/login" *@
@rendermode InteractiveServer
@using Microsoft.AspNetCore.Identity
@using NadsTech.Models
@inject SignInManager<ApplicationUser> SignInManager
@inject UserManager<ApplicationUser> UserManager
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime

<PageTitle>Connexion - NadsTech</PageTitle>

<div class="min-h-screen bg-gradient-to-br from-slate-50 to-blue-50 dark:from-slate-900 dark:to-slate-800 flex items-center justify-center py-12 px-4 sm:px-6 lg:px-8">
    <div class="max-w-md w-full space-y-8">
        <div>
            <h2 class="mt-6 text-center text-3xl font-extrabold text-gray-900 dark:text-white">
                Connexion à votre compte
            </h2>
            <p class="mt-2 text-center text-sm text-gray-600 dark:text-gray-400">
                Ou
                <a href="/register" class="font-medium text-blue-600 hover:text-blue-500 dark:text-blue-400 dark:hover:text-blue-300">
                    créez un nouveau compte
                </a>
            </p>
        </div>
        
        <div class="mt-8 space-y-6">
            <div class="rounded-md shadow-sm -space-y-px">
                <div>
                    <label for="email" class="sr-only">Adresse email</label>
                    <input id="email" name="email" type="email" required 
                           @bind="email"
                           class="appearance-none rounded-none relative block w-full px-3 py-2 border border-gray-300 dark:border-gray-600 placeholder-gray-500 dark:placeholder-gray-400 text-gray-900 dark:text-white rounded-t-md focus:outline-none focus:ring-blue-500 focus:border-blue-500 focus:z-10 sm:text-sm dark:bg-gray-700"
                           placeholder="Adresse email" />
                </div>
                <div>
                    <label for="password" class="sr-only">Mot de passe</label>
                    <input id="password" name="password" type="password" required 
                           @bind="password"
                           class="appearance-none rounded-none relative block w-full px-3 py-2 border border-gray-300 dark:border-gray-600 placeholder-gray-500 dark:placeholder-gray-400 text-gray-900 dark:text-white rounded-b-md focus:outline-none focus:ring-blue-500 focus:border-blue-500 focus:z-10 sm:text-sm dark:bg-gray-700"
                           placeholder="Mot de passe" />
                </div>
            </div>

            @if (!string.IsNullOrEmpty(errorMessage))
            {
                <div class="rounded-md bg-red-50 dark:bg-red-900 p-4">
                    <div class="flex">
                        <div class="ml-3">
                            <h3 class="text-sm font-medium text-red-800 dark:text-red-200">
                                Erreur de connexion
                            </h3>
                            <div class="mt-2 text-sm text-red-700 dark:text-red-300">
                                @errorMessage
                            </div>
                        </div>
                    </div>
                </div>
            }

            @if (!string.IsNullOrEmpty(debugMessage))
            {
                <div class="rounded-md bg-blue-50 dark:bg-blue-900 p-4">
                    <div class="flex">
                        <div class="ml-3">
                            <h3 class="text-sm font-medium text-blue-800 dark:text-blue-200">
                                Debug
                            </h3>
                            <div class="mt-2 text-sm text-blue-700 dark:text-blue-300">
                                @debugMessage
                            </div>
                        </div>
                    </div>
                </div>
            }

            <div class="flex items-center justify-between">
                <div class="flex items-center">
                    <input id="remember-me" name="remember-me" type="checkbox" @bind="rememberMe"
                           class="h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded" />
                    <label for="remember-me" class="ml-2 block text-sm text-gray-900 dark:text-gray-300">
                        Se souvenir de moi
                    </label>
                </div>

                <div class="text-sm">
                    <a href="/forgot-password" class="font-medium text-blue-600 hover:text-blue-500 dark:text-blue-400 dark:hover:text-blue-300">
                        Mot de passe oublié ?
                    </a>
                </div>
            </div>

            <div>
                <button type="button" @onclick="HandleLogin"
                        class="group relative w-full flex justify-center py-2 px-4 border border-transparent text-sm font-medium rounded-md text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 disabled:opacity-50 disabled:cursor-not-allowed"
                        disabled="@isLoading">
                    @if (isLoading)
                    {
                        <svg class="animate-spin -ml-1 mr-3 h-5 w-5 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                            <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
                            <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                        </svg>
                    }
                    Se connecter
                </button>
            </div>
        </div>
    </div>
</div>

@code {
    private string email = "";
    private string password = "";
    private bool rememberMe = false;
    private bool isLoading = false;
    private string errorMessage = "";
    private string debugMessage = "";

    private async Task HandleLogin()
    {
        debugMessage = "Méthode HandleLogin appelée - " + DateTime.Now.ToString("HH:mm:ss");
        isLoading = true;
        errorMessage = "";

        try
        {
            debugMessage = $"Tentative de connexion pour: {email}";
            Console.WriteLine($"Tentative de connexion pour: {email}");
            
            // Vérifier si l'utilisateur existe
            var user = await UserManager.FindByEmailAsync(email);
            if (user == null)
            {
                errorMessage = "Utilisateur non trouvé.";
                debugMessage = "Utilisateur non trouvé dans la base de données";
                isLoading = false;
                return;
            }
            
            debugMessage = $"Utilisateur trouvé: {user.UserName}";
            Console.WriteLine($"Utilisateur trouvé: {user.UserName}");
            
            var result = await SignInManager.PasswordSignInAsync(email, password, rememberMe, lockoutOnFailure: false);
            
            debugMessage = $"Résultat de connexion: {result.Succeeded}, LockedOut: {result.IsLockedOut}, RequiresTwoFactor: {result.RequiresTwoFactor}";
            Console.WriteLine($"Résultat de connexion: {result.Succeeded}, LockedOut: {result.IsLockedOut}, RequiresTwoFactor: {result.RequiresTwoFactor}");
            
            if (result.Succeeded)
            {
                debugMessage = "Connexion réussie, redirection...";
                Console.WriteLine("Connexion réussie, redirection...");
                await Task.Delay(100); // Petit délai pour laisser le temps aux cookies de se définir
                await JSRuntime.InvokeVoidAsync("window.location.href", "/");
            }
            else if (result.IsLockedOut)
            {
                errorMessage = "Compte verrouillé. Veuillez réessayer plus tard.";
                debugMessage = "Compte verrouillé";
            }
            else
            {
                errorMessage = "Email ou mot de passe incorrect.";
                debugMessage = "Échec de l'authentification";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Une erreur s'est produite lors de la connexion: {ex.Message}";
            debugMessage = $"Exception: {ex.Message}";
            Console.WriteLine($"Erreur de connexion: {ex.Message}");
            Console.WriteLine($"Stack trace: {ex.StackTrace}");
        }
        finally
        {
            isLoading = false;
        }
    }
} 