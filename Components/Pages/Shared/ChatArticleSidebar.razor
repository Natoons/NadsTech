@* Composant ChatArticleSidebar (mock) *@
@using Microsoft.AspNetCore.Components.Web
@using System.Net.Http.Headers
@using System.Net.Http.Json
@using Microsoft.AspNetCore.Components.Authorization
@inject HttpClient Http
@inject NavigationManager Navigation
@inject AuthenticationStateProvider AuthStateProvider

<div class="bg-white dark:bg-gray-800 rounded-2xl shadow-lg p-3 flex flex-col h-[340px] min-h-[240px] max-h-[340px] w-full overflow-hidden">
    <h3 class="text-base font-bold mb-1 text-gray-900 dark:text-white flex items-center gap-2">
        <span>üí¨ Chat IA sur l'article</span>
        <span class="ml-auto text-xs text-gray-400 font-normal">(max 3 questions/jour)</span>
    </h3>
    <div class="flex-1 overflow-y-auto space-y-2 mb-1 pr-1 custom-scrollbar">
        @foreach (var msg in Messages)
        {
            <div class="flex @(msg.IsUser ? "justify-end" : "justify-start")">
                <div class="rounded-xl px-3 py-1.5 max-w-[80%] shadow text-xs"
                     style="background:@(msg.IsUser ? "#2563eb" : "#f3f4f6");color:@(msg.IsUser ? "#fff" : "#222")">
                    @if (msg.IsUser)
                    {
                        @msg.Text
                    }
                    else
                    {
                        <Markdown>@msg.Text</Markdown>
                    }
                </div>
            </div>
        }
        @if (IsLoading)
        {
            <div class="flex justify-start">
                <div class="rounded-xl px-3 py-1.5 bg-gray-200 text-gray-500 text-xs animate-pulse">
                    L'IA r√©fl√©chit...
                </div>
            </div>
        }
    </div>
    <div class="flex gap-2 mt-1">
        <input class="flex-1 px-2 py-1 border border-gray-300 dark:border-gray-600 rounded-xl focus:outline-none focus:ring-1 focus:ring-blue-500 dark:bg-gray-700 dark:text-white text-xs" @bind="CurrentQuestion" placeholder="Posez une question sur l'article." @onkeydown="OnKeyDown" autocomplete="off" />
        <button class="px-3 py-1 bg-blue-600 text-white rounded-xl hover:bg-blue-700 transition disabled:opacity-50 text-xs" @onclick="SendQuestion" disabled="@(IsLoading || string.IsNullOrWhiteSpace(CurrentQuestion))">
            Envoyer
        </button>
    </div>
    @if (!string.IsNullOrEmpty(ErrorMsg))
    {
        <div class="text-xs text-red-500 mt-1">@ErrorMsg</div>
    }
</div>

@code {
    [Parameter] public int ArticleId { get; set; }
    [Parameter] public string? ArticleTitle { get; set; }

    private string CurrentQuestion = "";
    private List<ChatMsg> Messages = new();
    private bool IsLoading = false;
    private string? ErrorMsg;

    private async Task SendQuestion()
    {
        Console.WriteLine($"[Chat] SendQuestion appel√©. Texte: '{CurrentQuestion}' ArticleId: {ArticleId}");
        ErrorMsg = null;
        if (string.IsNullOrWhiteSpace(CurrentQuestion) || IsLoading)
        {
            Console.WriteLine("[Chat] Question vide ou en cours de traitement, sortie anticip√©e.");
            return;
        }
        var question = CurrentQuestion.Trim();
        Messages.Add(new ChatMsg { Text = question, IsUser = true });
        CurrentQuestion = "";
        IsLoading = true;
        StateHasChanged();
        try
        {
            var req = new { ArticleId, Question = question };
            var apiUrl = new Uri(new Uri(Navigation.BaseUri), "api/articleqa/ask");
            var request = new HttpRequestMessage(HttpMethod.Post, apiUrl)
            {
                Content = JsonContent.Create(req)
            };
            Console.WriteLine($"[Chat] Envoi requ√™te API pour ArticleId={ArticleId}, Question='{question}'");
            var response = await Http.SendAsync(request);
            Console.WriteLine($"[Chat] Statut r√©ponse API: {response.StatusCode}");
            if (response.IsSuccessStatusCode)
            {
                var result = await response.Content.ReadFromJsonAsync<ApiResponse>();
                Console.WriteLine($"[Chat] R√©ponse IA: {result?.answer}");
                Messages.Add(new ChatMsg { Text = result?.answer ?? "(Pas de r√©ponse IA)", IsUser = false });
            }
            else
            {
                var msg = await response.Content.ReadAsStringAsync();
                Console.WriteLine($"[Chat] Erreur API: {msg}");
                ErrorMsg = $"Erreur API : {msg}";
                Messages.Add(new ChatMsg { Text = ErrorMsg, IsUser = false });
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"[Chat] Exception: {ex.Message}");
            ErrorMsg = $"Erreur : {ex.Message}";
            Messages.Add(new ChatMsg { Text = ErrorMsg, IsUser = false });
        }
        finally
        {
            IsLoading = false;
            StateHasChanged();
        }
    }

    private async Task<string?> GetAccessToken()
    {
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        if (user.Identity?.IsAuthenticated == true)
        {
            // Si tu utilises ASP.NET Core Identity avec cookies, il n'y a pas de JWT par d√©faut.
            // Pour une vraie API s√©curis√©e, il faudrait un endpoint pour obtenir un token JWT.
            // Ici, on suppose que l'API accepte le cookie d'authentification.
            return null;
        }
        return null;
    }

    private async Task OnKeyDown(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            await SendQuestion();
        }
    }

    private class ChatMsg
    {
        public string Text { get; set; } = string.Empty;
        public bool IsUser { get; set; }
    }
    private class ApiResponse
    {
        public string? answer { get; set; }
    }
} 