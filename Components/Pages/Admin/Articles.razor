@page "/admin/articles"
@using NadsTech.Data
@using NadsTech.Models
@using NadsTech.Services
@using Microsoft.EntityFrameworkCore
@inject ApplicationDbContext DbContext
@inject NavigationManager Navigation
@attribute [Microsoft.AspNetCore.Authorization.Authorize(Roles = "Admin")]
@layout AdminLayout

<PageTitle>Gestion des articles - Administration</PageTitle>

<div class="space-y-6">
    <!-- Header -->
    <div class="flex items-center justify-between">
        <div>
            <h1 class="text-2xl font-bold text-gray-900 dark:text-white">Gestion des articles</h1>
            <p class="text-gray-600 dark:text-gray-400">Créez et gérez vos articles</p>
        </div>
        
        <button @onclick="@(() => Navigation.NavigateTo("/admin/articles/new"))" 
                class="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors">
            Nouvel article
        </button>
    </div>

    <!-- Filters -->
    <div class="bg-white dark:bg-gray-800 rounded-lg shadow p-6">
        <div class="grid grid-cols-1 md:grid-cols-4 gap-4">
            <div>
                <label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">Recherche</label>
                <input type="text" @bind="searchTerm" @bind:event="oninput" 
                       placeholder="Rechercher un article..."
                       class="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent dark:bg-gray-700 dark:text-white" />
            </div>
            
            <div>
                <label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">Statut</label>
                <select @bind="statusFilter" 
                        class="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent dark:bg-gray-700 dark:text-white">
                    <option value="">Tous</option>
                    <option value="published">Publiés</option>
                    <option value="draft">Brouillons</option>
                </select>
            </div>
            
            <div>
                <label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">Catégorie</label>
                <select @bind="categoryFilter" 
                        class="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent dark:bg-gray-700 dark:text-white">
                    <option value="">Toutes</option>
                    @foreach (var category in categories)
                    {
                        <option value="@category">@category</option>
                    }
                </select>
            </div>
            
            <div>
                <label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">Tri</label>
                <select @bind="sortBy" 
                        class="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent dark:bg-gray-700 dark:text-white">
                    <option value="date">Date de création</option>
                    <option value="title">Titre</option>
                    <option value="views">Vues</option>
                    <option value="likes">Likes</option>
                </select>
            </div>
        </div>
    </div>

    <!-- Articles Table -->
    <div class="bg-white dark:bg-gray-800 rounded-lg shadow overflow-hidden">
        <div class="px-6 py-4 border-b border-gray-200 dark:border-gray-700">
            <h3 class="text-lg font-medium text-gray-900 dark:text-white">Articles (@filteredArticles?.Count articles)</h3>
        </div>
        
        <div class="overflow-x-auto">
            <table class="min-w-full divide-y divide-gray-200 dark:divide-gray-700">
                <thead class="bg-gray-50 dark:bg-gray-700">
                    <tr>
                        <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">Article</th>
                        <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">Auteur</th>
                        <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">Statut</th>
                        <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">Vues</th>
                        <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">Date</th>
                        <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">Actions</th>
                    </tr>
                </thead>
                <tbody class="bg-white dark:bg-gray-800 divide-y divide-gray-200 dark:divide-gray-700">
                    @if (filteredArticles?.Any() == true)
                    {
                        @foreach (var article in filteredArticles)
                        {
                            <tr class="hover:bg-gray-50 dark:hover:bg-gray-700">
                                <td class="px-6 py-4 whitespace-nowrap">
                                    <div class="flex items-center">
                                        @if (!string.IsNullOrEmpty(article.ImageUrl))
                                        {
                                            <img src="@article.ImageUrl" alt="@article.Title" class="w-10 h-10 rounded-lg object-cover mr-3" />
                                        }
                                        <div>
                                            <div class="text-sm font-medium text-gray-900 dark:text-white">@article.Title</div>
                                            <div class="text-sm text-gray-500 dark:text-gray-400">@article.Category</div>
                                        </div>
                                    </div>
                                </td>
                                <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900 dark:text-white">
                                    @article.Author
                                </td>
                                <td class="px-6 py-4 whitespace-nowrap">
                                    <span class="px-2 py-1 text-xs font-medium rounded-full @(article.IsPublished ? "bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-200" : "bg-yellow-100 text-yellow-800 dark:bg-yellow-900 dark:text-yellow-200")">
                                        @(article.IsPublished ? "Publié" : "Brouillon")
                                    </span>
                                </td>
                                <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900 dark:text-white">
                                    @article.ViewCount
                                </td>
                                <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500 dark:text-gray-400">
                                    @article.CreatedAt.ToString("dd MMM yyyy")
                                </td>
                                <td class="px-6 py-4 whitespace-nowrap text-sm font-medium">
                                    <div class="flex items-center space-x-2">
                                        <button @onclick="@(() => Navigation.NavigateTo($"/admin/articles/edit/{article.Id}"))" 
                                                class="text-blue-600 dark:text-blue-400 hover:text-blue-800 dark:hover:text-blue-300">
                                            Modifier
                                        </button>
                                        <button @onclick="@(() => TogglePublishStatus(article))" 
                                                class="@(article.IsPublished ? "text-red-600 dark:text-red-400 hover:text-red-800 dark:hover:text-red-300" : "text-green-600 dark:text-green-400 hover:text-green-800 dark:hover:text-green-300")">
                                            @(article.IsPublished ? "Dépublier" : "Publier")
                                        </button>
                                        <button @onclick="@(() => DeleteArticle(article.Id))" 
                                                class="text-red-600 dark:text-red-400 hover:text-red-800 dark:hover:text-red-300">
                                            Supprimer
                                        </button>
                                    </div>
                                </td>
                            </tr>
                        }
                    }
                    else
                    {
                        <tr>
                            <td colspan="6" class="px-6 py-4 text-center text-gray-500 dark:text-gray-400">
                                Aucun article trouvé
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    </div>
</div>

@code {
    private List<Article>? allArticles;
    private List<Article>? filteredArticles;
    private List<string> categories = new();
    private string searchTerm = "";
    private string statusFilter = "";
    private string categoryFilter = "";
    private string sortBy = "date";

    protected override async Task OnInitializedAsync()
    {
        await LoadArticles();
    }

    private async Task LoadArticles()
    {
        try
        {
            allArticles = await DbContext.Articles
                .OrderByDescending(a => a.CreatedAt)
                .ToListAsync();

            categories = allArticles
                .Where(a => !string.IsNullOrEmpty(a.Category))
                .Select(a => a.Category!)
                .Distinct()
                .OrderBy(c => c)
                .ToList();

            ApplyFilters();
        }
        catch
        {
            allArticles = new List<Article>();
            filteredArticles = new List<Article>();
        }
    }

    private void ApplyFilters()
    {
        if (allArticles == null) return;

        var filtered = allArticles.AsQueryable();

        // Filtre par recherche
        if (!string.IsNullOrEmpty(searchTerm))
        {
            var searchTermLower = searchTerm.ToLower();
            filtered = filtered.Where(a => 
                a.Title.ToLower().Contains(searchTermLower) ||
                (a.Summary != null && a.Summary.ToLower().Contains(searchTermLower)) ||
                a.Content.ToLower().Contains(searchTermLower)
            );
        }

        // Filtre par statut
        if (!string.IsNullOrEmpty(statusFilter))
        {
            if (statusFilter == "published")
                filtered = filtered.Where(a => a.IsPublished);
            else if (statusFilter == "draft")
                filtered = filtered.Where(a => !a.IsPublished);
        }

        // Filtre par catégorie
        if (!string.IsNullOrEmpty(categoryFilter))
        {
            filtered = filtered.Where(a => a.Category == categoryFilter);
        }

        // Tri
        filtered = sortBy switch
        {
            "title" => filtered.OrderBy(a => a.Title),
            "views" => filtered.OrderByDescending(a => a.ViewCount),
            "likes" => filtered.OrderByDescending(a => a.LikeCount),
            _ => filtered.OrderByDescending(a => a.CreatedAt)
        };

        filteredArticles = filtered.ToList();
    }

    private async Task TogglePublishStatus(Article article)
    {
        try
        {
            article.IsPublished = !article.IsPublished;
            if (article.IsPublished && article.PublishedAt == null)
            {
                article.PublishedAt = DateTime.Now;
            }
            
            await DbContext.SaveChangesAsync();
            await LoadArticles();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Erreur lors du changement de statut: {ex.Message}");
        }
    }

    private async Task DeleteArticle(int articleId)
    {
        try
        {
            var article = await DbContext.Articles.FindAsync(articleId);
            if (article != null)
            {
                DbContext.Articles.Remove(article);
                await DbContext.SaveChangesAsync();
                await LoadArticles();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Erreur lors de la suppression: {ex.Message}");
        }
    }
} 