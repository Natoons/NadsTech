@page "/articles"
@using NadsTech.Models
@using NadsTech.Data
@using Microsoft.EntityFrameworkCore
@using static Microsoft.AspNetCore.Components.Web.RenderMode
@rendermode InteractiveServer
@inject ApplicationDbContext DbContext
@inject NavigationManager Navigation

<PageTitle>Articles - NadsTech</PageTitle>

<div class="min-h-screen bg-gradient-to-br from-slate-50 to-blue-50 dark:from-slate-900 dark:to-slate-800">
    <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        <!-- Header -->
        <div class="mb-8">
            <h1 class="text-4xl font-bold text-gray-900 dark:text-white mb-4">
                Articles Tech
            </h1>
            <p class="text-lg text-gray-600 dark:text-gray-300">
                Découvrez les dernières actualités tech analysées par l'IA
            </p>
        </div>

        <!-- Filtres et recherche -->
        <div class="bg-white dark:bg-gray-800 rounded-xl shadow-lg p-6 mb-8">
            <div class="grid grid-cols-1 md:grid-cols-3 gap-4">
                <div>
                    <label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                        Recherche
                    </label>
                    <input type="text" 
                           @bind="searchTerm" 
                           @bind:event="oninput"
                           placeholder="Rechercher un article..."
                           class="w-full px-4 py-2 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent dark:bg-gray-700 dark:text-white" />
                </div>
                <div>
                    <label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                        Catégorie
                    </label>
                    <select @bind="selectedCategory" 
                            class="w-full px-4 py-2 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent dark:bg-gray-700 dark:text-white">
                        <option value="">Toutes les catégories</option>
                        @foreach (var category in categories)
                        {
                            <option value="@category">@category</option>
                        }
                    </select>
                </div>
                <div>
                    <label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                        Trier par
                    </label>
                    <select @bind="sortBy" 
                            class="w-full px-4 py-2 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent dark:bg-gray-700 dark:text-white">
                        <option value="date">Date de publication</option>
                        <option value="views">Nombre de vues</option>
                        <option value="likes">Nombre de likes</option>
                        <option value="title">Titre</option>
                    </select>
                </div>
            </div>
        </div>

        <!-- Articles -->
        @if (filteredArticles?.Any() == true)
        {
            <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8">
                @foreach (var article in filteredArticles)
                {
                    <div class="bg-white dark:bg-gray-800 rounded-xl shadow-lg hover:shadow-xl transition-shadow overflow-hidden">
                        @if (!string.IsNullOrEmpty(article.ImageUrl))
                        {
                            <img src="@article.ImageUrl" alt="@article.Title" class="w-full h-48 object-cover" />
                        }
                        <div class="p-6">
                            <div class="flex items-center gap-2 mb-3">
                                @if (!string.IsNullOrEmpty(article.Category))
                                {
                                    <span class="px-3 py-1 bg-blue-100 dark:bg-blue-900 text-blue-800 dark:text-blue-200 text-sm font-medium rounded-full">
                                        @article.Category
                                    </span>
                                }
                                <span class="text-sm text-gray-500 dark:text-gray-400">
                                    @article.CreatedAt.ToString("dd MMM yyyy")
                                </span>
                            </div>
                            <h3 class="text-xl font-semibold text-gray-900 dark:text-white mb-3 line-clamp-2">
                                @article.Title
                            </h3>
                            @if (!string.IsNullOrEmpty(article.Summary))
                            {
                                <p class="text-gray-600 dark:text-gray-300 mb-4 line-clamp-3">
                                    @article.Summary
                                </p>
                            }
                            <div class="flex items-center justify-between">
                                <div class="flex items-center gap-4 text-sm text-gray-500 dark:text-gray-400">
                                    <span class="flex items-center gap-1">
                                        <svg class="w-4 h-4" fill="currentColor" viewBox="0 0 20 20">
                                            <path d="M10 12a2 2 0 100-4 2 2 0 000 4z"/>
                                            <path fill-rule="evenodd" d="M.458 10C1.732 5.943 5.522 3 10 3s8.268 2.943 9.542 7c-1.274 4.057-5.064 7-9.542 7S1.732 14.057.458 10zM14 10a4 4 0 11-8 0 4 4 0 018 0z" clip-rule="evenodd"/>
                                        </svg>
                                        @article.ViewCount
                                    </span>
                                    <span class="flex items-center gap-1">
                                        <svg class="w-4 h-4" fill="currentColor" viewBox="0 0 20 20">
                                            <path fill-rule="evenodd" d="M3.172 5.172a4 4 0 015.656 0L10 6.343l1.172-1.171a4 4 0 115.656 5.656L10 17.657l-6.828-6.829a4 4 0 010-5.656z" clip-rule="evenodd"/>
                                        </svg>
                                        @article.LikeCount
                                    </span>
                                </div>
                                <button @onclick="@(() => Navigation.NavigateTo($"/articles/{article.Id}"))" 
                                        class="text-blue-600 dark:text-blue-400 hover:text-blue-800 dark:hover:text-blue-300 font-medium">
                                    Lire plus →
                                </button>
                            </div>
                        </div>
                    </div>
                }
            </div>

            <!-- Pagination -->
            @if (totalPages > 1)
            {
                <div class="flex justify-center mt-8">
                    <nav class="flex items-center gap-2">
                        @if (currentPage > 1)
                        {
                            <button @onclick="@(() => ChangePage(currentPage - 1))" 
                                    class="px-3 py-2 text-gray-500 dark:text-gray-400 hover:text-gray-700 dark:hover:text-gray-200">
                                Précédent
                            </button>
                        }
                        
                        @for (int i = Math.Max(1, currentPage - 2); i <= Math.Min(totalPages, currentPage + 2); i++)
                        {
                            <button @onclick="@(() => ChangePage(i))" 
                                    class="px-3 py-2 @(i == currentPage ? "bg-blue-600 text-white" : "text-gray-500 dark:text-gray-400 hover:text-gray-700 dark:hover:text-gray-200") rounded-lg">
                                @i
                            </button>
                        }
                        
                        @if (currentPage < totalPages)
                        {
                            <button @onclick="@(() => ChangePage(currentPage + 1))" 
                                    class="px-3 py-2 text-gray-500 dark:text-gray-400 hover:text-gray-700 dark:hover:text-gray-200">
                                Suivant
                            </button>
                        }
                    </nav>
                </div>
            }
        }
        else
        {
            <div class="text-center py-12">
                <div class="text-gray-400 dark:text-gray-600 mb-4">
                    <svg class="w-16 h-16 mx-auto" fill="currentColor" viewBox="0 0 20 20">
                        <path fill-rule="evenodd" d="M8 4a4 4 0 100 8 4 4 0 000-8zM2 8a6 6 0 1110.89 3.476l4.817 4.817a1 1 0 01-1.414 1.414l-4.816-4.816A6 6 0 012 8z" clip-rule="evenodd"/>
                    </svg>
                </div>
                <h3 class="text-lg font-medium text-gray-900 dark:text-white mb-2">Aucun article trouvé</h3>
                <p class="text-gray-500 dark:text-gray-400">Essayez de modifier vos critères de recherche</p>
            </div>
        }
    </div>
</div>

@code {
    private List<Article>? allArticles;
    private List<Article>? filteredArticles;
    private List<string> categories = new();
    private string searchTerm = "";
    private string selectedCategory = "";
    private string sortBy = "date";
    private int currentPage = 1;
    private int pageSize = 9;
    private int totalPages = 1;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            // Récupérer tous les articles publiés
            allArticles = await DbContext.Articles
                .Where(a => a.IsPublished)
                .ToListAsync();

            // Extraire les catégories uniques
            categories = allArticles
                .Where(a => !string.IsNullOrEmpty(a.Category))
                .Select(a => a.Category!)
                .Distinct()
                .OrderBy(c => c)
                .ToList();

            ApplyFilters();
        }
        catch
        {
            allArticles = new List<Article>();
            filteredArticles = new List<Article>();
        }
    }

    private void ApplyFilters()
    {
        if (allArticles == null) return;

        var filtered = allArticles.AsQueryable();

        // Filtre par recherche
        if (!string.IsNullOrEmpty(searchTerm))
        {
            var searchTermLower = searchTerm.ToLower();
            filtered = filtered.Where(a => 
                a.Title.ToLower().Contains(searchTermLower) ||
                (a.Summary != null && a.Summary.ToLower().Contains(searchTermLower)) ||
                a.Content.ToLower().Contains(searchTermLower) ||
                a.Tags.Any(t => t.ToLower().Contains(searchTermLower))
            );
        }

        // Filtre par catégorie
        if (!string.IsNullOrEmpty(selectedCategory))
        {
            filtered = filtered.Where(a => a.Category == selectedCategory);
        }

        // Tri
        filtered = sortBy switch
        {
            "date" => filtered.OrderByDescending(a => a.PublishedAt ?? a.CreatedAt),
            "views" => filtered.OrderByDescending(a => a.ViewCount),
            "likes" => filtered.OrderByDescending(a => a.LikeCount),
            "title" => filtered.OrderBy(a => a.Title),
            _ => filtered.OrderByDescending(a => a.PublishedAt ?? a.CreatedAt)
        };

        // Pagination
        totalPages = (int)Math.Ceiling((double)filtered.Count() / pageSize);
        currentPage = Math.Max(1, Math.Min(currentPage, totalPages));
        
        filteredArticles = filtered
            .Skip((currentPage - 1) * pageSize)
            .Take(pageSize)
            .ToList();
    }

    private void ChangePage(int page)
    {
        currentPage = page;
        ApplyFilters();
    }
} 